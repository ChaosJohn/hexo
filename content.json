{"meta":{"title":"湿科技","subtitle":"Dancing With Tech","description":"","author":"Chaos John","url":"https://hexo.chaosjohn.com","root":"/"},"pages":[],"posts":[{"title":"禁用macOS更新提醒角标","slug":"Disable-Update-Badge-of-macOS","date":"2020-11-26T01:23:06.000Z","updated":"2020-11-26T06:45:52.031Z","comments":true,"path":"2020/11/26/Disable-Update-Badge-of-macOS/","link":"","permalink":"https://hexo.chaosjohn.com/2020/11/26/Disable-Update-Badge-of-macOS/","excerpt":"","text":"近日来，苹果电脑的操作系统 macOS Catalina 接近了生命周期的尾声，新的操作系统 Big Sur 于2020年11月12日已经发布（很有意思的是正式版的首个版本号为11.0.1，而11.0.0并未对外发布，只预装在Apple M1的三台ARM新机上，详见下图，来源于维基百科） 笔者是Mac死忠粉，自 Mac OS X 10.7 Lion 开始用，经历过系统升级还需付费购买的年代（还记得当时是花了128元升级到了 OS X 10.8 Mountain Lion ），跨到开始免费的 OS X 10.9 Mavericks ，直至后来开始抛去 OS X 命名的 macOS Sierra ，然后到 macOS High Sierra ，只要释出第一个版本，笔者就会更新尝鲜。无奈，很明显的感觉到苹果在软件方面的“做工”越来越糙了，尝鲜用户慢慢沦为了”实验小白鼠”以及”bug反馈器”，所以后来的 macOS Majave 和 macOS Catalina ，我放弃了尝鲜，都等到x.4版本释出才决定更新，才堪堪感觉“可以用了”。 macOS Big Sur 这不刚出就被人笑成 Bug Sur ，笔者毅然决然不更它。 可是问题来了，升级提醒小红点真是逼死我了！！！还不是一处！ 系统左上角苹果标🍎，点击下拉菜单，在 系统偏好设置(System Preferences) 处提醒有更新 如果把 系统偏好设置 锁定在Dock栏的话，小红点+1 在 系统偏好设置 内的 软件更新(Software Update) 上，小红点+2 解决策略- 系统版本 小于 10.15.5 or 等于 10.15.6（是的，就是这么奇怪，该策略在10.15.5中被弃用了，但在10.15.6中又放出来了，之后又去掉了，参考） 关闭 系统偏好设置 打开 终端(Terminal) 执行 sudo softwareupdate --ignore &quot;macOS Big Sur&quot;。如果处于 Mojave 想阻止升级到 Catalina, 把命令中的 Big Sur 改成 Catalina即可。 （如果改变主意想接收更新了，执行 sudo softwareupdate --reset-ignored即可恢复） - 系统版本 等于 10.15.5 or 大于 10.15.6 执行: defaults write com.apple.systempreferences AttentionPrefBundleIDs 0 &amp;&amp; killall Dock，小红点就消失了，不再提示升级了 恢复: defaults write com.apple.systempreferences AttentionPrefBundleIDs 1 &amp;&amp; killall Dock","categories":[],"tags":[]},{"title":"于2020年末的回归","slug":"Comeback-in-2020","date":"2020-11-25T07:07:01.000Z","updated":"2020-11-25T08:38:45.000Z","comments":true,"path":"2020/11/25/Comeback-in-2020/","link":"","permalink":"https://hexo.chaosjohn.com/2020/11/25/Comeback-in-2020/","excerpt":"","text":"是的，我回来了。 距写上一篇文章已经过去3年多了，很汗颜，虽然文章本来就不多。 建站之初，想好好经营这个博客，毕竟我是一个非常乐于分享的技术宅，我想把我学会的，我踩坑的，我创造的，都通过这个博客展示出来。 虽然找借口很不耻，但我不得不解释一下，为啥挺好的抱负却被我荒废了三年之久。 次要原因：工作不得志，职场不称心 主要原因：生活了无希望，前女友掏空我所有的精力，即使把所有的心思都花上，得来的是无休止的挑刺和吵闹。多次分手无果(懂的人自然懂)，认命了，就像一眼看到了人生的终点，对感情和生活完全丧失信心，进而在自己热爱的工作和行业上失去了奋斗的动力。 万幸的是，我最后终于摆脱了前任，并且走出了阴影。更加幸运的是，半年前，我遇到了我的小可爱，她的出现，照亮了我的天空。 我满血复活了！！！ 所以，我回来了！","categories":[],"tags":[]},{"title":"Hexo YAMLException: can not read a block mapping entry","slug":"Hexo-YAMLException-can-not-read-a-block-mapping-entry","date":"2017-10-09T07:28:03.000Z","updated":"2020-11-26T01:11:15.000Z","comments":true,"path":"2017/10/09/Hexo-YAMLException-can-not-read-a-block-mapping-entry/","link":"","permalink":"https://hexo.chaosjohn.com/2017/10/09/Hexo-YAMLException-can-not-read-a-block-mapping-entry/","excerpt":"","text":"问题好久没写博客，刚刚写了一篇Nginx反向代理获取真实客户端IP，然后执行hexo d -g是报了错：YAMLException: can not read a block mapping entry; a multiline key may not be an implicit key at line 4, column 1: 查错 先来看看刚刚写的Markdown文件 很明显，第四行只是一个分隔符，怎么可能出问题 谷歌一下错误，发现问题所在，其实是第三行的错误，tags:后面没有跟空格，yaml处理出错。参考 捐赠最后，如果该文对读者有些许帮助，考虑下给点捐助鼓励一下呗😊","categories":[],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://hexo.chaosjohn.com/tags/hexo/"}]},{"title":"Nginx反向代理获取真实客户端IP","slug":"Nginx-Real-Client-IP","date":"2017-10-09T02:51:57.000Z","updated":"2020-11-25T09:44:24.000Z","comments":true,"path":"2017/10/09/Nginx-Real-Client-IP/","link":"","permalink":"https://hexo.chaosjohn.com/2017/10/09/Nginx-Real-Client-IP/","excerpt":"","text":"起因 此前做了一个小项目，php实现，ip.chaosjohn.com, 可以用命令行来获取当前客户端ip地址，效果如下： 之前是用CaddyServer来运行这个服务，最近把其从CaddyServer迁移到nginx，很顺利的迁移成功。以学习为目的，我在该服务器上用另外一个地址ip.vultr-01.coodiin.com（以下称“反代端”）反向代理到ip.chaosjohn.com（以下称“后端”），却出现问题了，ip读取不正确，显示的是服务器的IP。Nginx配置如下： 问题分析 出现这样的情况的原因是因为，在反向代理的过程中，对于后端而言，反代端就是客户端。 解决 要解决这个问题，则需要把真实的客户端地址告诉后端。那反代端和后端怎么沟通真实的IP地址呢？一个说另一个得听吧，两边都要设置。 反代端 proxy_set_header X-Real-IP $remote_addr; # 设置X-Real-IP为真实来源请求的IP地址 proxy_bind 127.0.0.1; # 规定代理请求的出口地址 后端 set_real_ip_from 127.0.0.1/32; # 只有从这个地址来的请求才会设置真实IP，才会应用X-Real-IP这个header 最后的代码 4. 结语下次打算记录一下php的配置，包含Nginx和CaddyServer。最后，如果该文对读者有些许帮助，考虑下给点捐助鼓励一下呗😊","categories":[],"tags":[{"name":"Nginx","slug":"Nginx","permalink":"https://hexo.chaosjohn.com/tags/Nginx/"}]},{"title":"破解Mac菜单栏神器 -- Bartender2","slug":"Crack-Bartender2","date":"2016-11-04T06:59:31.000Z","updated":"2020-11-26T01:11:13.000Z","comments":true,"path":"2016/11/04/Crack-Bartender2/","link":"","permalink":"https://hexo.chaosjohn.com/2016/11/04/Crack-Bartender2/","excerpt":"","text":"题外话真的好久好久没有更新blog了，上篇博客还是今年5月30号。虽然好几次想更两篇，但是。。。懒癌晚期。。。哈哈哈，废话不多说，进入正文。 软件介绍Bartender是一款管理mac菜单栏图标的软件，笔者的mac装了很多很多的应用，很多都会在菜单栏里停驻一个图标，然后顶部的菜单栏悲剧的挤满了。。。用Windows的童鞋都知道，在桌面任务栏右下角都会有一箭头，收起时只显示几个常驻的图标，点击后其他隐藏的图标才会出现。一直搞不明白为什么苹果原生不能增加一个这样的功能呢？应该也不是什么难事呀！Bartender实现的就是这个功能。关于Bartender的详细介绍移步少数派 破解的缘由 笔者其实很愿意为软件花钱（前提是在承受范围内哈哈哈），自打大四进入工作以来，在各类软件&amp;服务上花的钱也有一两千了。比如，Bartender第一代，我就花了$15。然后就一直使用到今年，一直相安无事，直到Bartender出了第二代，优化了界面显示以及加了些小功能，但是都没戳中我痛点，所以就一直没有去改用Bartender2。 但是，9月下旬mac更新了操作系统macOS Sierra，升级完很悲剧的发现，Bartender1已经不兼容改操作系统了，而且显然，作者把重心放在了Bartender2上，估计也不会更新Bartender1了。不得已，只好卸载了1安装上了2。结果发现，1的序列号不能再2上使用，得重新购买($15)或者从1升级到2($7.5)。。。天杀的！！！ 还好有4个星期的试用期，就先用着了。。。但是用着一个会到期的服务，那感觉，就像头上悬着把刀，很不是滋味。。。于是我就开始思考：它是怎么计算试用时间的？ 一番捣鼓后，试用时间被我成功重置，但是不知道这个漏洞会不会被封堵掉，所以直到今天被我再次重置后(期间Bartender2已经升级了好几个版本)，我才确定了我的破解方法的可行性。 破解过程 假设Bartender2试用时间已过期 关闭Bartender2，打开AppCleaner，找到Bartender2那项，点击它，会弹出一个窗口，里面会罗列出与该应用相关的所有配置文件等等。 经猜测锁定”com.surteesstudio.Bartender.plist”，打开翻到最后，果然看到“trialStart”这样的字样，哈哈哈。 用编辑器打开(笔者用的XCode，因为上次直接用Vim编辑保存后Bartender不能识别），把”trialStart”和”trialStart2”改成当前日期的前两天. 大功告成 结语最后，如果该文对读者有些许帮助，考虑下给点捐助鼓励一下呗😊","categories":[],"tags":[{"name":"Crack","slug":"Crack","permalink":"https://hexo.chaosjohn.com/tags/Crack/"},{"name":"Software","slug":"Software","permalink":"https://hexo.chaosjohn.com/tags/Software/"}]},{"title":"解决“Gradle -- Could not find tools.jar”","slug":"Gradle-Could-not-find-tools-jar","date":"2016-05-30T06:48:44.000Z","updated":"2020-11-26T01:11:15.000Z","comments":true,"path":"2016/05/30/Gradle-Could-not-find-tools-jar/","link":"","permalink":"https://hexo.chaosjohn.com/2016/05/30/Gradle-Could-not-find-tools-jar/","excerpt":"","text":"错误出现的环境 CentOS 7 x86_64 已通过sudo yum install java-1.8.0-openjdk安装OpenJDK8 部署完成的Spring-Boot项目，执行./gradlew bootRun 报错`Could not find tools.jar 该项目在其他的机器上均未出现该问题，包括OSX、Ubuntu和另一台CentOS 解决方案 经StackOverFlow搜索，发现Gradle does not find tools.jar和Correct way of referencing tools.jar in a cross-platform way两篇，主要是通过改build.gradle，强制加入tools的搜寻路径来解决问题。目测有效，但是因为在其他机子上都正常运行不报错，所以放弃该方案。 突然想起来在很多情况下报错都是因为没有安装dev包（或devel包），比如pip安装模块却没有安装python-dev等等。就寻思着，OpenJDK会不会也要安装dev组件呢？ 键入sudo yum search openjdk | grep -i dev进行搜索，果然有java-1.8.0-openjdk-devel sudo yum install java-1.8.0-openjdk-devel，再次./gradlew bootRun，成功运行不报错 结语开发过程中出现问题了，不仅要勤搜索，还要勤动脑思考。最后，如果该文对读者有些许帮助，考虑下给点捐助鼓励一下呗😊","categories":[],"tags":[{"name":"Java","slug":"Java","permalink":"https://hexo.chaosjohn.com/tags/Java/"},{"name":"Gradle","slug":"Gradle","permalink":"https://hexo.chaosjohn.com/tags/Gradle/"},{"name":"Error","slug":"Error","permalink":"https://hexo.chaosjohn.com/tags/Error/"}]},{"title":"Mosh(Mobile Shell) -- 增强版SSH","slug":"Mosh-Imporved-SSH","date":"2016-05-30T06:25:15.000Z","updated":"2020-11-25T03:21:45.000Z","comments":true,"path":"2016/05/30/Mosh-Imporved-SSH/","link":"","permalink":"https://hexo.chaosjohn.com/2016/05/30/Mosh-Imporved-SSH/","excerpt":"","text":"开场白 Mosh，是Mobile Shell的缩写(Mo+Sh)，是一个增强版的SSH，或者套用官方的话来说，Mosh is a replacement for SSH。 SSH相信大家应该都不陌生，我们都用它来进行远程登录Unix-like的操作系统，比如运行着Linux的云服务器。 SSH有一个很大的弊病，那就是连接会断。比如新建了一个SSH会话，然后突然网断了，SSH就断开连接终止了。 Mosh就是用来解决这个问题的，它可以“漫游”。网断了，重连，或者从一个WiFi切换到另一个WiFi，然后又切换成数据流量，会话一直都在。 另外一个笔者非常喜欢的特点是–本地响应特别快(intelligent local echo)。笔者有好几台国外的服务器，几乎都是美国的。从中国大陆到美国的Ping值一般都超过200ms，有时候甚至在400ms以上，在这种情况下对比SSH与Mosh的表现： SSH：键盘按下每一个字符，比如“a”，远程服务器接收到本地键盘的响应，然后再告诉本地“这边已接到你按下字母a”，这之后，本地的终端才会显示出字母a。假设Ping值是200ms，那么每次按下按键之后，得有400ms的延迟屏幕才有显示，so，打字一卡一卡的很难受，体验很糟糕。 Mosh：键盘每按下一个字符，屏幕上立马就会显示，发送给远程服务器的工作则在后台静默执行，打字非常流畅。 安装 Mac OS X 从pkg软件包安装：OS X 10.5–10.9 &amp;&amp; OS X 10.9+ HomeBrew：$ brew install mosh MacPorts：$ sudo port install mosh Windows - Cygwin: C:\\&gt; setup.exe -q mobile-shell Chrome浏览器：插件Mosh for Chrome Linux Ubuntu/Debian: $ sudo apt-get install mosh ArchLinux: $ sudo pacman -S mosh CentOS/Fedaro：$ sudo yum install mosh FreeBSD: $ sudo pkg install net/mosh 编译安装 下载源码包进行 123456$ wget https://mosh.mit.edu/mosh-1.2.5.tar.gz$ tar xvzf mosh-1.2.5.tar.gz$ cd mosh-1.2.5$ ./configure$ make# make install 从git拉取源码 123456$ git clone https://github.com/mobile-shell/mosh$ cd mosh$ ./autogen.sh$ ./configure$ make# make install 使用方法 基本上和SSH一模一样，直接$ mosh server-address就好了，因为Mosh的本质还是SSH 如果远程主机的SSH端口不是22，比如是2022，则需要$ mosh remotehost --ssh=&quot;ssh -p 2022&quot; 一般来说，远程主机的环境要配置成en_US.UTF-8，不然会报“mosh requires a UTF-8 locale.”之类的异常，根本用不了。琢磨了好久，研究出一套多平台的解决方案。 Linux 12341. 在/etc/environment中追加一句LC_ALL=&quot;en_US.UTF-8&quot;2.A [Ubuntu/Debian] $ sudo locale-gen en_US.UTF-8 2.B [CentOS/Fedaro] $ sudo localedef -v -c -i en_US -f UTF-8 en_US.UTF-83. reboot FreeBSD：只需在~/.login_conf中追加 1234me:\\ :charset=UTF-8:\\ :lang=en_US.UTF-8:\\ :setenv=LC_COLLATE=C: 踩坑 错误Nothing received from the server on UDP port 60003：简单来说，Mosh的网络通信由两部分组成，TCP用于SSH会话+UDP用于会话保持。TCP部分的端口就是SSH的端口，而UDP的端口则是60000~61000之间的随机数。该错误的解决方案将UDP端口加入防火墙的白名单$ sudo iptables -I INPUT 1 -p udp --dport 60000:61000 -j ACCEPT 笔者家里的那台老MacBook作为文件服务器，常年开着不关机，但是从外网通过Mosh访问回去，会出现找不到mosh-server的异常。原因是笔者用HomeBrew安装的Mosh，执行文件被默认放在/usr/local/bin/下，在高版本的OSX下，因安全方面的考虑，该路径不在系统的初始PATH里，所以会找不到mosh-server。解决方法是“显式指定执行文件的路径”：1$ mosh macbook --server&#x3D;&#x2F;usr&#x2F;local&#x2F;bin&#x2F;mosh-server 结语自从两年前发现了这么个利器，在笔者的日常运维中，它已经完全替代了SSH的存在。最后，如果该文对读者有些许帮助，考虑下给点捐助鼓励一下呗😊","categories":[],"tags":[{"name":"Software","slug":"Software","permalink":"https://hexo.chaosjohn.com/tags/Software/"},{"name":"Dev","slug":"Dev","permalink":"https://hexo.chaosjohn.com/tags/Dev/"}]},{"title":"安卓平板上的开发者实用工具","slug":"Tools-for-Developers-on-Android-Tablet","date":"2016-05-29T08:52:15.000Z","updated":"2020-11-25T08:49:06.000Z","comments":true,"path":"2016/05/29/Tools-for-Developers-on-Android-Tablet/","link":"","permalink":"https://hexo.chaosjohn.com/2016/05/29/Tools-for-Developers-on-Android-Tablet/","excerpt":"","text":"1. 测试机型和本文的受众 你得有一块android平板，或者一只超大屏的android手机(类似小米MAX，其实小米Note也凑合)。 你还得是个开发者，本文介绍的工具都是为开发者准备，如果你不是，请拉到文章末尾，就只给你安利GMD GestureControl这一个软件啦🙈。 本文封面的是笔者的小米平板第一代64G版，于15年“双十一”花1099块大洋买了送给女朋友的，后来公司年终抽奖抽到一块iPad mini2，就从女朋友手里把这块安卓板子换回来了（笔者是标准的暖男嚯嚯嚯）。 笔者绝对没有给小米打广告，相反除了这块MiPad之外，笔者只想狠狠地黑小米，比如小米MAX–这货到底是手机还是平板啊；比如说公司花3000块钱买回来的小米Note顶配版–特喵的一天三充而且果然“为发烧而生”。 只有这块14年问世的MiPad，用下来觉得还好，续航很给力，而且“NVIDIA Tegra K1”的CPU，放到现在16年中旬，还能排上号。 笔者虽然是果粉，但是绝对不鄙视android，相反在各类平板中选择的话，我还是比较偏好android的。原因无他，用的顺手。（以后我会写篇文章讲讲我为什么平板选择android，而手机却选择iPhone） 2. 系统版本 小米平板嘛，出厂必须自带MIUI滴。 想把小米平板变成“PC”，还刷过一次RemixOS，但是因为官方没有支持MiPad，只有民间大神制作的兼容包，还只有1.0版本的，虽然用着体验挺好的，最后实在架不住某些蛋疼的bug，还是刷回了MIUI系统。关于RemixOS，如果有感兴趣的，可以去官网下载他们的PC版，安装到u盘上直接插电脑体验，不建议刷到大家的平板上。 为了Root，所以刷了MIUI的开发版本，已升级到MIUI7(Android 4.4.4)，删除了系统的Updater.apk，禁用了自动更新。 3. 必装应用列表 谷歌安装器（需root）：给国内被阉割的安卓系统安装“谷歌服务框架”和“谷歌应用市场”。 ES File Explorer：笔者在安卓平台上用过的最好用的文件管理器，给开发者推荐的原因如下 方便管理已安装应用，还可以备份应用（包括应用数据） 支持ftp/sftp，方便连接本地局域网的电脑或云端的Linux主机，进行传输文件。 Root Explorer（需root）：俗称“RE管理器”，可以直接将系统路径挂载为可写，还可以原生读取应用的db文件。 AirDroid：无线传输文件和管理安卓设备。 从电脑上查看安卓设备的内容（照片、收发短信等） 把电脑当做平板的“键盘”，当电脑上点中Airdroid的窗口后，电脑键盘的输入都会同步到平板上去。 Hacker’s Keyboard：“黑客键盘”，模拟标准的PC键盘，包括F1~F12，ctrl，alt，shift，tab等功能键。非常实用。 Serverauditor：SSH客户端，配色非常小清新，而且跨平台，在iOS和chrome上都有。还能自动判别所连接的主机是什么系统并且给相应的主机加上对应系统的Logo。 ConnectBot：也是一款SSH客户端，官方Github的介绍为“ConnectBot is the first SSH client for Android”。功能比Serverauditor强大，而且Hacker’s Keyboard专门为其做了优化（详见Hacker’s Keyboard的设置页）。 IrssiConnectBot：以ConnectBot为原型的SSH客户端，增加了mosh协议。切记，千万不要去GooglePlay商店安装，那里下载的版本和最基础的ConnectBot一毛一样，根本就没有mosh！请到IrssiConnectBot的官网下载或者点击此处下载或者去它的Github下载源码到本地自己编译。 JuiceSSH：看名称就知道它也是一款SSH客户端了，同样支持mosh协议，而且是mosh官网推荐的mosh客户端。功能非常强大，还支持插件。但是！笔者不喜欢JuiceSSH，因为笔者远程管理主机一般都会使用到Tmux，需要按缀键Ctrl-B来激活，但是JuiceSSH不识别同时按下的Ctrl键和B键，故抛弃。但不妨碍它成为GooglePlay上最畅销的SSH客户端之一。 Shadowsocks：不解释，懂得人自然懂，不懂的人，有“病”的话搜索一下（哈哈哈，其实是bing.com），百度该词已被和谐。当然建议从GooglePlay上安装。 BusyBox（需root）：BusyBox 被称为 Linux 工具里的瑞士军刀.简单的说BusyBox就好像是个大工具箱，它集成压缩了 Linux 的许多工具和命令。Android的本质是Linux，但其底层的一些工具不仅较标准的Linux少很多，已有的几乎也是功能不完善的。BusyBox的作用就是补全和替换掉这些Linux工具。 Linux Deploy（需root和安装BusyBox）：最后祭上的终极杀器，官方Github。简单一句话介绍–“在你的安卓设备上原生跑Linux”。基本原理–“chroot”，想详细了解的可以从这个关键词入手。可以选择的Linux发行版有很多，主流的都有，包括Debian、Ubuntu、CentOS、Arch Linux、Gentoo等等，安装完成后可以通过127.0.0.1:22进行SSH登入。如果平板的空间足够的话，可以同时安装很多个(如下图所示，笔者安装了Arch Linux、Ubuntu和Gentoo)，但只能同时选择一个运行。 GMD GestureControl Lite（需root）：最后的最后，送上的一枚手势软件（并非只为开发者推荐哦）。这边给出的链接是Lite版（非Lite版要价5.55美元），但是Lite版就够用了。羡慕iPad的各种手势吗？四指内抓退回桌面、四指左右横扫切换上一个应用和下一个应用、四指上推显示最近应用列表。。。有了这个软件，这些功能你都能实现！而且实现的更多！简直堪比iOS的越狱插件Activator！ 4. 结语其实还有很多很多其他为开发者准备的软件，如果有读者愿意推荐的话，请在下面给我留言啦，小弟不胜感激！最后，如果该文对读者有些许帮助，考虑下给点捐助鼓励一下呗😊","categories":[],"tags":[{"name":"Software","slug":"Software","permalink":"https://hexo.chaosjohn.com/tags/Software/"},{"name":"Utility","slug":"Utility","permalink":"https://hexo.chaosjohn.com/tags/Utility/"},{"name":"Android","slug":"Android","permalink":"https://hexo.chaosjohn.com/tags/Android/"},{"name":"Developer","slug":"Developer","permalink":"https://hexo.chaosjohn.com/tags/Developer/"}]},{"title":"只为体验小红点--我的“ThinkPad X200”","slug":"My-ThinkPad-X200","date":"2016-05-28T08:50:50.000Z","updated":"2020-11-26T01:11:15.000Z","comments":true,"path":"2016/05/28/My-ThinkPad-X200/","link":"","permalink":"https://hexo.chaosjohn.com/2016/05/28/My-ThinkPad-X200/","excerpt":"","text":"1. 手贱入坑X200 之前逛知乎逛论坛，经常看到有两拨人打口水仗，非得就“MacBook的触控板和Thinkpad的小红点哪一个好用”争个脸红耳赤。（前者为TrackPad，后者为TrackPoint） 作为一个已经用了四五年MacBook的果粉，笔者之前一直觉得TrackPad是史上最好用的电脑输入设备。以至于笔者一直是TrackPad的重度使用者，电脑包里只有MacBook而从来不携带鼠标，也从来没有使用鼠标的习惯。（PS：笔者是一只非常稀少的不打游戏的雄性程序猿） 看多了“TrackPad Vs. TrackPoint“之争，自然心里痒痒的。咋办哩？那就买一台体验体验！可是ThinkPad还挺贵的，买一台大几千呢，笔者可是勤俭持家的好男人，老婆本可不能随便动。。。于是默默地掏出爪机刷起了闲鱼(🙈捂脸逃) 选机上，笔者看中了ThinkPad X200，经典的小黑，百度百科链接 Intel(R) Core(TM)2 Duo CPU – 至少不是赛扬奔腾之类的处理器 Intel GMA X4500显卡 – 都说了笔者不打游戏了，要独显干嘛，浪费钱？ DDR3 – 还好不是DDR2，不然升级低版本的内存得死贵死贵的，还记得之前有买过一根DDR333的1G内存都花了两百左右 只有TrackPoint，没有触摸板 – 要是有触摸板的话，我怕自己会下意识的用它，那算哪门子的体验小红点呀 闲鱼上的X200大多在600块钱左右，如果配备SSD，价格差不多都飙到八九百，一千多的也有很多。笔者的价格底线是500，唉，怎么那么穷！ X200在笔者的“欲购清单”上待了大半年，时不时地就来闲鱼看看有没有合适的(佩服自己的耐心)。终于在三周前，联系到了一位卖家，与他商议不要内存不要硬盘（笔者有闲置的内存条和硬盘），于是以290的价格成交（包邮）。哇咔咔！ 一周星期的焦急等待后，盼来了X200。拆机，包的还挺严实，打开，按下电源键，还有电，关机。打开后盖，有两个内存插槽，随便插上一根4G的内存，再次开机，居然提示内存错误。原来两个内存插槽还分0号和1号，必须从0号开始使用起。晕死，换了个内存插槽，果然没问题了。再换成两根2G的，也没问题。玩过这么多电脑，还是第一次见到这种状况。随便找个了装了Linux Live的u盘，能正常进入系统，蓝牙Wifi工作都正常。 2. X200初体验 先说说缺点 有两个按键太灵敏，X和K，轻轻碰上去都会打出x和k的字母。X键太灵敏能忍，但是作为VIM党，K键太灵敏就不能忍！扣下键帽，用缝衣针把里面的脏东西挑出来，吹风机吹吹，按回去，居然好了！于是，此缺点从此消失。 底部靠近电源的一个防滑橡胶脚垫掉了，电脑放在桌子上会不稳，经常会有“卡拉卡拉”和桌面轻碰的声音。于是上某宝花了几块钱买了个相同型号的脚垫。该缺点也从此消失。 电池是6芯的，设计容量1723mAh，剩余容量1470mAh，仅为原来的85%，续航只能撑2个小时不到。这个缺点等以后真正有续航需求的时候再考虑解决吧，买个9芯的电池也就一两百块钱。 找不到其他缺点了😀 以下开始进入“拍马屁模式” 成色非常好（见封面图），键盘完全没有油光，用酒精把整机擦拭了一遍后，保守估计95新吧，噢耶赚到了，闲鱼上很多卖的很贵的，看成色都很旧很脏。 重量很轻，1.394KG，笔者的MacBook Air重量也达到了1.35KG，只差44g（脑海里莫名地想起初中物理课本，一个鸡蛋50g） 笔者买的这台X200是P8600的CPU，性能比最早的i3都要强。。。笔者最早的一台MacBook是经典款的“小白”MC207，P7550的CPU，用到现在为止都依然“坚挺”！ 键盘手感很好，比Mac的原装键盘要好，键程适中，弹性不错，手感偏软。 散热真赞！发热真小！电脑开一整天，C面(有键盘的那一面)没有丝毫热感，D面(电脑底部)感觉和人的体温差不多，出风口几乎没有很大的风吹出来，导致整机非常静音，丝毫没有其他电脑风扇为了散热狂转造成的噪音。 Wifi居然支持2.4GHz和5GHz双频段！！！天哪，08年的电脑啊！！！ 3. 体验小红点 其实说是说小红点，但不仅仅是在按键“B”上方的红色的橡胶点，还包括了空格下方的三个按键，从左往右分别对应鼠标的左键、中键和右键。如下图所示。 按住小红点，手指往哪边用力，光标就会往哪边移动。一开始真的很难把握移动的角度和速度，总是很难非常快速地把光标移动到目标位置，用力小了，移动地太慢，用力大了，一下子就移动过头了。还好没有买带触摸板的型号，强迫自己使用小红点半天不到，就差不多能顺畅使用它了。 左键和右键的功能就不说了，如果在浏览网页或文档时，按住中键后再给小红点用力，就能滚屏啦。“哗哗哗”非常顺畅，个人感觉比鼠标滚轮要好用得多，简直能媲美MacBook触控板的双指滚屏，很是喜欢！ 因为尚未在X200上安装过Windows，所以关于小红点在Windows下的表现笔者不进行描述，一般要去ThinkPad官网下载相关驱动以启动。 因为快递刚收到的时候，笔者为了测整机质量，所以就用了一块Linux LiveUSB进行启动，操作系统为最新的Ubuntu 16.04，内置了TrackPoint的驱动，小红点的所有功能都能正常使用。所以读者如果安装Ubuntu系列的操作系统的话，是不用费心再安装相关驱动的，开箱即用。 笔者收到快递当天就在某东买了块120GB的SSD，于是就在这块硬盘上安装了Arch Linux。 Arch Linux的安装不再赘述，直接参照Arch Wiki的新手教程即可，以后有机会我会写篇比较浅显易懂的文章。 那么问题来了，小红点在Arch Linux下只能用作移动光标，而不能用来滚动屏幕。真是愁死了，废了好大劲安装了Arch Linux，结果却不能完全发挥小红点的威力。 在Google上搜索了一番，终于找到了解决方案，在命令行下输入以下开启垂直滚动 123456789 xinput set-prop &quot;TPPS/2 IBM TrackPoint&quot; &quot;Evdev Wheel Emulation&quot; 1 xinput set-prop &quot;TPPS/2 IBM TrackPoint&quot; &quot;Evdev Wheel Emulation Button&quot; 2 xinput set-prop &quot;TPPS/2 IBM TrackPoint&quot; &quot;Evdev Wheel Emulation Timeout&quot; 200 ``` * 如果还想开启水平滚动的话，执行 ```bash xinput set-prop &quot;TPPS/2 IBM TrackPoint&quot; &quot;Evdev Wheel Emulation Axes&quot; 6 7 4 5 以上这些xinput命令不是永久性的，每次图形界面(xserver)重启，都得重新执行才能生效。但可以放在.xsessionrc内，当xserver启动时会自动执行。 当然，如果不喜欢命令行的话，也有图形界面程序来解决啦。有两个选择，GPointing Device Settings和configure-trackpoint。笔者在Arch Linux上安装了前者，如下图所示 4. 结语体验下来，MacBook和ThinkPad都很赞，现在这台290收来的X200已经成为了笔者的半个主力机，晚上下班回去，如果不写博客的话，大多数时间是抱着ThinkPad。如果读者也想体验体验的话，上闲鱼收个X200是个很不错的选择，当然，X61也可以考虑哦，虽然性能比X200差，但是最近民间有“厂子”有在开发号称“X62”的主板，具体详见 。最后，如果该文对读者有些许帮助，考虑下给点捐助鼓励一下呗😊","categories":[],"tags":[{"name":"Toy","slug":"Toy","permalink":"https://hexo.chaosjohn.com/tags/Toy/"},{"name":"Hardware","slug":"Hardware","permalink":"https://hexo.chaosjohn.com/tags/Hardware/"},{"name":"ThinkPad","slug":"ThinkPad","permalink":"https://hexo.chaosjohn.com/tags/ThinkPad/"},{"name":"TrackPoint","slug":"TrackPoint","permalink":"https://hexo.chaosjohn.com/tags/TrackPoint/"}]},{"title":"HomeBrew -- OSX下的最强软件包管理器","slug":"HomeBrew-The-Best-Package-Manager-On-OSX","date":"2016-05-26T09:23:57.000Z","updated":"2020-11-25T03:21:45.000Z","comments":true,"path":"2016/05/26/HomeBrew-The-Best-Package-Manager-On-OSX/","link":"","permalink":"https://hexo.chaosjohn.com/2016/05/26/HomeBrew-The-Best-Package-Manager-On-OSX/","excerpt":"","text":"1. 什么是软件包管理器软件包管理器（以下简称包管理器），是用来管理系统下面软件和程序的工具，负责它们的搜索、安装、更新升级和卸载。 2. 为什么需要包管理器 包管理器一般来说是*nix系统(Unix-like: Linux, Mac OS X, FreeBSD等等)独有的。 Windows的软件生态系统决定了它不需要包管理器，大部分用户都是用它的图形界面，他们所需要做的就是在获取到该软件的安装包(Installer)后，运行后”Next”-&gt;”Next”-&gt;…-&gt;”Finish”，直至安装到某个路径下，创建软件的启动器快捷方式。 *nix系统中除了Mac OS X(以下简称OSX)外，其他的系统的主要用途是作为服务器，用Linux做桌面系统来用的家伙不会很多，大部分都是像我这样的苦逼程序猿，用FreeBSD当桌面使用的更是少之又少。那么作为服务器来用的话，一般都不配备图形界面的，只有命令行接口。原因有二：一、图形界面耗性能啊；二、一般服务器都架在云端，你开个图形界面远程登录上去，鼠标拖动都一卡一卡的，那画面，真是太美不忍看。所以一般的Linux的发行版和FreeBSD都提供了包管理器，让用户能在命令行下比较轻松地管理软件（Debian: apt-get, Redhat/CentOS/Fedora: yum, ArchLinux: pacman）。。。呃，那些热衷于任何软件都要从源代码安装的家伙，有毒，我服！ 不知道是谁说过来着：“MacBook的死忠用户主要有两类：搞设计的和搞IT的”。。。既然搞IT，那肯定离不开命令行。对于我们程序猿来说，OSX真是一个绝妙的组合，既有非常美丽易用的GUI，又有纯*nix的命令行。像ngnix和apache等等这些命令行软件，OSX“出厂”时是没有的，所以要么从下载它们的源代码编译安装，要么就用包管理器来安装。 3. OSX下有哪些包管理器 __MacPorts__：源于BSD的ports，纯源码编译安装。用简单的话来说，它帮你计算目标软件所需要的依赖，然后把所有依赖和目标软件依次下载源码编译安装。它的优点很明显，软件不依赖操作系统本身，升级系统版本一般不会破坏软件体系；同时缺点也很明显，无论安装还是更新软件，编译源代码实在是太费时间了，笔者的第一台Macbook是09年的经典小白mc207，酷睿P7550的CPU，每次升级MacPorts都只敢在晚上睡觉时进行。MacPorts是笔者最早使用的，陪伴了将近三年时间。最后放弃的原因不是编译费时，而是系统升级到了Yosemite和El Capitan后，有很多软件死活编译不通过，无法更新。 Fink: 很抱歉笔者没有用过，所以在这里我只放科普贴的简介Fink是基于Debian的packaging tools开发的。最大的特点是安装软件是预编译好的(pre-compiled/pre-built)。 所以，用Fink安装package是不需要在本机编译的，都是现成的binary code。 Fink最大的问题是package跟进不够快。很多最新版的软件，你要等Fink。 HomeBrew: 哈哈哈，有些读者都要怪我啰嗦了，这么半天才开始文章的主要角色。HomeBrew是基于Ruby语言写的，从包管理的特色上来看，它似乎是Macports和Fink俩生的儿子 😂。在依赖处理上，它尽量使用系统原有的库，如果系统不提供，它才安装依赖；安装时优先选择已编译好的二进制包，如果没有它才下载源码进行编译安装。 4. 安装HomeBrew 笔者之前介绍过，HomeBrew是用Ruby写的，而OSX内置了Ruby，所以打开终端(Terminal)，把/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;复制粘贴进去，回车执行，That’s all。 5. HomeBrew基础命令 笔者在这边以安装wget举例（OSX居然没有集成wget，真有点不爽） brew search wget 搜索软件，列出所有包含目标名称的软件 brew install wget 安装软件，默认安装到/usr/local下面去 brew info wget 查看安装包信息 brew uninstall wget 卸载软件 brew update 更新所有软件列表（HomeBrew使用git，直接从github上pull下来） brew upgrade 升级所有软件 brew cleanup 清理 brew list 列出所有通过HomeBrew安装的软件 brew doctor 检查HomeBrew是否存在问题 6. 笔者用HomeBrew安装的软件推荐列表 wget 不再赘述 htop top的高级版，更直观，是一款用来监测系统的CPU、内存、uptime、进程等系统信息的工具 tree 以树状形式列出文件目录树 tmux 终端复用软件，神器，谁用谁知道 hardlink-osx 让你给目录加硬链接，对，你没听错，目录！ macvim vim在OSX下的GUI版本，做了很多OSX的本地化，比如cmd+w关闭等等 mpg123 mpg321 名字很秀逗的两个软件，命令行音乐播放器，可以用来装个逼😀 mplayer mpv 两个非常棒的多媒体播放器，个人更偏好后者 mtr traceroute的加强版 nvm 对node进行多版本管理 python3 OSX下安装Python3最为方便的方法了 7. Cask – HomeBrew的大杀器 一句话介绍：用来安装各种OSX应用程序的工具，例如Chrome, Firefox，MysqlWorkbench。 安装Cask：brew tap phinze/homebrew-cask &amp;&amp; brew install brew-cask 使用（以Chrome举例）： brew cask search chrome 搜索应用，结果显示我们要安装google-chrome brew cask install google-chrome 安装应用 brew cask uninstall google-chrome 卸载应用 brew update 更新所有应用列表 brew cleanup 清理 Cask相比brew缺少了upgrade命令，所以这边奉上一行shell脚本，用来升级所有用Cask安装的应用程序 for c in $(brew cask list); do ! brew cask info $c | grep -qF &quot;Not installed&quot; || brew cask install $c; done 8. 结语HomeBrew以给我节省了很多找软件和安装软件的时间，导致我对它越来越喜欢，以至于，我系统里一切能用HomeBrew搜索到的软件，我全用它来搞定了。关于这篇博文，我觉得对某些人来说，那句给Cask进行upgrade的shell脚本，是最具有价值的。（那就~考虑给我点捐助进行鼓励吧，一元两元不嫌少，一百两百不嫌多）","categories":[],"tags":[{"name":"Software","slug":"Software","permalink":"https://hexo.chaosjohn.com/tags/Software/"},{"name":"MacBook","slug":"MacBook","permalink":"https://hexo.chaosjohn.com/tags/MacBook/"},{"name":"OSX","slug":"OSX","permalink":"https://hexo.chaosjohn.com/tags/OSX/"}]},{"title":"上手Hexo","slug":"Getting-Started-With-Hexo","date":"2016-01-28T14:18:28.000Z","updated":"2020-11-25T09:44:14.000Z","comments":true,"path":"2016/01/28/Getting-Started-With-Hexo/","link":"","permalink":"https://hexo.chaosjohn.com/2016/01/28/Getting-Started-With-Hexo/","excerpt":"","text":"这篇文章主要记载一下我如何上手Hexo(搭建本博客的技术)。 前期准备 NodeJS GitHub (已配置好SSH接入，详情参考GitHub官网) 域名 (可选项，下面会说明何时必须要求绑定域名) 开始安装Hexo$ npm install -g hexo 在GitHub上创建博客仓库此时得考虑两种选择： GitHub Pages (每个GitHub账号只能创建一个，即该仓库的默认分支master就是博客，而且仓库名是固定为username.github.io)。如果博客搭建成功，浏览器访问https://username.github.io就能打开博客。 gh-pages (可以创建无限多个，每个仓库都能创建一个静态博客，但是博客必须在gh-pages分支下)。在这种情况下，博主必需使用域名通过CNAME解析你的博客仓库，否则文章的CSS样式路径会出错，导致整个页面会是下面这种没有样式的样子 在本地部署 在本地clone你创建的GitHub仓库 默认为master分支，如果你使用的是gh-pages，需要切换到gh-pages分支。$ git branch gh-pages &amp;&amp; git checkout gh-pages 初始化hexo $ hexo init，并且调用npm安装相应的node_modules $ npm install 开启服务器进行本地预览（此时hexo默认生成了一篇Hello-World博客）$ hexo server，浏览器打开localhost:4000就能看到效果博客效果。建议操作博客时关闭服务器(ctrl-c)。 新增博客$ hexo new &quot;new blog name&quot;，hexo会生成以new-blog-name.md为名的博客 部署到GitHub 编辑博客仓库根目录下的_config.yml文件，在末尾追加变成为 123456# Deployment## Docs: http://hexo.io/docs/deployment.htmldeploy: type: git repository: git@github.com:username/blog.git branch: master 为避免下一步骤出现 ERROR Deployer not found : git的报错，需要安装git部署模块$ npm install hexo-deployer-git --save 生成静态文章$ hexo generate 部署到GitHub`$ hexo deploy` 测试博客 如果搭建的是GitHub Pages，则直接访问https://username.github.io即可 如果搭建的是gh-pages，则还需配置域名，比如笔者的域名为chaosjohn.com。 在域名的DNS解析内新增两条A记录，指向GitHub Pages提供的IP 192.30.252.153 192.30.252.154 接着在DNS解析内新增一条CNAME记录，记录名比如使用blog，记录值为username.github.io，添加完后可能会在记录值追加一个’.’，不用纠结，这个就是CNAME的格式。 在博客仓库的source文件夹内新建一个CNAME文件，文件内容就是blog.chaosjohn.com 重新生成静态文章并且部署到GitHub，可以使用快捷命令$ hexo d -g 命令集合 常用命令 hexo new “postName” #新建文章 hexo new page “pageName” #新建页面 hexo generate #生成静态页面至public目录 hexo server #开启预览访问端口（默认端口4000，’ctrl + c’关闭server） hexo deploy #将.deploy目录部署到GitHub hexo help # 查看帮助 hexo version #查看Hexo的版本 复合命令 hexo deploy -g #生成加部署 hexo server -g #生成加预览 命令简写 hexo n == hexo new hexo g == hexo generate hexo s == hexo server hexo d == hexo deploy (各位大侠行行好给点捐助吧）","categories":[],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://hexo.chaosjohn.com/tags/hexo/"}]},{"title":"Hello World","slug":"hello-world","date":"2016-01-28T13:18:28.000Z","updated":"2020-11-25T08:45:08.000Z","comments":true,"path":"2016/01/28/hello-world/","link":"","permalink":"https://hexo.chaosjohn.com/2016/01/28/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://hexo.chaosjohn.com/tags/hexo/"},{"name":"Nginx","slug":"Nginx","permalink":"https://hexo.chaosjohn.com/tags/Nginx/"},{"name":"Crack","slug":"Crack","permalink":"https://hexo.chaosjohn.com/tags/Crack/"},{"name":"Software","slug":"Software","permalink":"https://hexo.chaosjohn.com/tags/Software/"},{"name":"Java","slug":"Java","permalink":"https://hexo.chaosjohn.com/tags/Java/"},{"name":"Gradle","slug":"Gradle","permalink":"https://hexo.chaosjohn.com/tags/Gradle/"},{"name":"Error","slug":"Error","permalink":"https://hexo.chaosjohn.com/tags/Error/"},{"name":"Dev","slug":"Dev","permalink":"https://hexo.chaosjohn.com/tags/Dev/"},{"name":"Utility","slug":"Utility","permalink":"https://hexo.chaosjohn.com/tags/Utility/"},{"name":"Android","slug":"Android","permalink":"https://hexo.chaosjohn.com/tags/Android/"},{"name":"Developer","slug":"Developer","permalink":"https://hexo.chaosjohn.com/tags/Developer/"},{"name":"Toy","slug":"Toy","permalink":"https://hexo.chaosjohn.com/tags/Toy/"},{"name":"Hardware","slug":"Hardware","permalink":"https://hexo.chaosjohn.com/tags/Hardware/"},{"name":"ThinkPad","slug":"ThinkPad","permalink":"https://hexo.chaosjohn.com/tags/ThinkPad/"},{"name":"TrackPoint","slug":"TrackPoint","permalink":"https://hexo.chaosjohn.com/tags/TrackPoint/"},{"name":"MacBook","slug":"MacBook","permalink":"https://hexo.chaosjohn.com/tags/MacBook/"},{"name":"OSX","slug":"OSX","permalink":"https://hexo.chaosjohn.com/tags/OSX/"}]}